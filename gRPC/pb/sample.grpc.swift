//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: pb/sample.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Pb_SampleServiceGetSampleCall: ClientCallUnary {}

fileprivate final class Pb_SampleServiceGetSampleCallBase: ClientCallUnaryBase<Pb_SampleRequest, Pb_SampleResponse>, Pb_SampleServiceGetSampleCall {
  override class var method: String { return "/pb.SampleService/GetSample" }
}


/// Instantiate Pb_SampleServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Pb_SampleServiceService: ServiceClient {
  /// Synchronous. Unary.
  func getSample(_ request: Pb_SampleRequest, metadata customMetadata: Metadata) throws -> Pb_SampleResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getSample(_ request: Pb_SampleRequest, metadata customMetadata: Metadata, completion: @escaping (Pb_SampleResponse?, CallResult) -> Void) throws -> Pb_SampleServiceGetSampleCall

}

internal extension Pb_SampleServiceService {
  /// Synchronous. Unary.
  func getSample(_ request: Pb_SampleRequest) throws -> Pb_SampleResponse {
    return try self.getSample(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getSample(_ request: Pb_SampleRequest, completion: @escaping (Pb_SampleResponse?, CallResult) -> Void) throws -> Pb_SampleServiceGetSampleCall {
    return try self.getSample(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Pb_SampleServiceServiceClient: ServiceClientBase, Pb_SampleServiceService {
  /// Synchronous. Unary.
  internal func getSample(_ request: Pb_SampleRequest, metadata customMetadata: Metadata) throws -> Pb_SampleResponse {
    return try Pb_SampleServiceGetSampleCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getSample(_ request: Pb_SampleRequest, metadata customMetadata: Metadata, completion: @escaping (Pb_SampleResponse?, CallResult) -> Void) throws -> Pb_SampleServiceGetSampleCall {
    return try Pb_SampleServiceGetSampleCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Pb_SampleServiceProvider: ServiceProvider {
  func getSample(request: Pb_SampleRequest, session: Pb_SampleServiceGetSampleSession) throws -> Pb_SampleResponse
}

extension Pb_SampleServiceProvider {
  internal var serviceName: String { return "pb.SampleService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/pb.SampleService/GetSample":
      return try Pb_SampleServiceGetSampleSessionBase(
        handler: handler,
        providerBlock: { try self.getSample(request: $0, session: $1 as! Pb_SampleServiceGetSampleSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Pb_SampleServiceGetSampleSession: ServerSessionUnary {}

fileprivate final class Pb_SampleServiceGetSampleSessionBase: ServerSessionUnaryBase<Pb_SampleRequest, Pb_SampleResponse>, Pb_SampleServiceGetSampleSession {}

